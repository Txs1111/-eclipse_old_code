/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.33
 * Generated at: 2021-03-01 15:26:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.SQLException;
import java.sql.ResultSet;
import dao.*;
import bean.*;
import java.util.Random;

public final class season_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("dao");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("bean");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.util.Random");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	/*------------------------------------------------------------------------------------------------
	修改人		 		     许良	     						许良
	修改时间    			2021.1.19						2021.1.20
	修改内容	   添加随机标语和根据日期更替季节实现      将提示性语句（system.out）删去
	版本号				   0.0.1 							0.0.2
	-------------------------------------------------------------------------------------------------*/

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
  
	//定义存放标语和月份的变量
	String sign = null;
	int nowmounth = 0;

	if(sign==null||nowmounth==0||sign.equals("")){
	//new 数据库连接、数据读取、随机对象
	MySQL_connect con = new MySQL_connect();
	Tabledata_read tr = new Tabledata_read();
	Handle_date hd = new Handle_date();
	Random r = new Random();
	
	
	try{
		//sql语句及执行
		String sql = "select id from page_sets";
		con.result = con.usercommend.executeQuery(sql);
		
		//随机读取并赋给标语变量
		con.result.last();
		int count = con.result.getRow();
		int ran = r.nextInt(count)%(count)+1;
		
		
		String sql2 = "select tips from page_sets where id = '"+ran+"'";
		con.result = con.usercommend.executeQuery(sql2);
		con.result.next();
		sign = con.result.getString("tips");
		}catch(SQLException e){
			sign = "I miss dancing with you the most of all";
			}
	
	try{
		nowmounth = Integer.parseInt(hd.getMonth());
	}catch(Exception e){
		nowmounth = 11;
		}
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"Css/Public_style.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"Css/Page_head.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"Css/Public_Color/orange.css\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body bgcolor=\"black\">\r\n");
      out.write("\t<div class=\"season_whole_block\" >\r\n");
      out.write("\t\t<div class=\"ahead_sign\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t<!--Ahead_图片-->\r\n");
      out.write("\t\t\t<img src=\"img/season/ahead_yellow.jpg\" style=\"height: 110%;\" />\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t<!--签名信息-->\r\n");
      out.write("\t\t<div class=\"season_title big-font font-normal-color\">");
out.println(sign+"");
      out.write("</div>\r\n");
      out.write("\t\t<!-- 最大长度：三十个字 -->\r\n");
      out.write("\r\n");
      out.write("\t\t<!--季节图片-->\r\n");
      out.write("\t\t<div class=\"season_area \">\r\n");
      out.write("\t\t\t");
 if(nowmounth==3 ||nowmounth==4||nowmounth==5){
			out.println("<img src=\"img/season/spring.jpg\" style=\"width: 70%; height: 100%\" />");
			}
      out.write("\r\n");
      out.write("\t\t\t");
 if(nowmounth==6 ||nowmounth==7||nowmounth==8){
			out.println("<img src=\"img/season/sum.jpg\" style=\"width: 70%; height: 100%\" />");
			}
      out.write("\r\n");
      out.write("\t\t\t");
 if(nowmounth==9 ||nowmounth==10||nowmounth==11){
			out.println("<img src=\"img/season/autumn.jpg\" style=\"width: 70%; height: 100%\" />");
			}
      out.write("\r\n");
      out.write("\t\t\t");
 if(nowmounth==12 ||nowmounth==2||nowmounth==1){
			out.println("<img src=\"img/season/winter.png\" style=\"width: 70%; height: 100%\" />");
			}
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
