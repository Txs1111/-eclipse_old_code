/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.33
 * Generated at: 2021-03-14 07:11:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.StringTokenizer;
import bean.Work_bean;

public final class Work_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.StringTokenizer");
    _jspx_imports_classes.add("bean.Work_bean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
/*------------------------------------------------------------------------------------------------
修改人			     
修改时间 		
修改内容		
版本号			 
-------------------------------------------------------------------------------------------------*/
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>作品</title>\r\n");
      out.write("\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"Css/Public_style.css\"/>\r\n");
      out.write("\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"Css/Work.css\"/>\r\n");
      out.write("\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"Css/Public_Color/orange.css\"/>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<style>\r\n");
      out.write("\t\tbutton{\r\n");
      out.write("\t\t\tborder:0;\r\n");
      out.write("\t\t\toutline:none;\r\n");
      out.write("\t\t\tcursor: pointer;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</style>\r\n");
      out.write("<body bgcolor=\"#F4F5F7\">\r\n");
      out.write("\r\n");
      out.write("\t");
 	//-----------
		request.setCharacterEncoding("UTF-8") ;//或者指定的编码(GBK或其他)
		String ID = null;
	    ID=(String)request.getSession().getAttribute("ID");
		String nowpage = "1";
		String class_1 = "worktype_chosen white-font normal-color work_bold_font normal-color";
		String class_2 = "worktype_unchoosen light-color";
		String class_3 = "worktype_unchoosen light-color";
		String lineClass_1 = "underline_show";
		String lineClass_2 = "underline_hide";
		String lineClass_3 = "underline_hide";
		
		if(request.getAttribute("ID")!=null)
		{
			ID=(String)request.getAttribute("ID");
		}else if(request.getParameter("ID")!=null)
		{
			ID=request.getParameter("ID");
		}
		
		if(request.getParameter("nowpage")!=null)
		{
		nowpage=request.getParameter("pages");
		}
		String type="1_1";
		String pages = "1";
		String chose = "1";
		if(request.getParameter("type")!=null)
		{
			type=(String)request.getParameter("type");
		}
		StringTokenizer StrTk = new StringTokenizer(type,"_");
		if(StrTk.hasMoreTokens()){
			pages = StrTk.nextToken();
			chose = StrTk.nextToken();
		}
		
		if(pages.equals("1")){
			 class_1 = "worktype_chosen white-font normal-color work_bold_font normal-color";
			 class_2 = "worktype_unchoosen light-color";
			 class_3 = "worktype_unchoosen light-color";
		}
		if(pages.equals("2")){
			 class_2 = "worktype_chosen white-font normal-color work_bold_font normal-color";
			 class_1 = "worktype_unchoosen light-color";
			 class_3 = "worktype_unchoosen light-color";
		}
		if(pages.equals("3")){
			 class_3 = "worktype_chosen white-font normal-color work_bold_font normal-color";
			 class_1 = "worktype_unchoosen light-color";
			 class_2 = "worktype_unchoosen light-color";
		}
		
		
		if(chose.equals("1")){
			lineClass_1 = "underline_show";
		    lineClass_2 = "underline_hide";
			lineClass_3 = "underline_hide";
		}
		if(chose.equals("2")){
			lineClass_1 = "underline_hide";
		    lineClass_2 = "underline_show";
			lineClass_3 = "underline_hide";
		}
		if(chose.equals("3")){
			lineClass_1 = "underline_hide";
		    lineClass_2 = "underline_hide";
			lineClass_3 = "underline_show";
		}
		
		Work_bean bean=new Work_bean(ID);
		bean.head();
		String role=bean.role;
	
      out.write("\r\n");
      out.write("\t\t<!-- 调用头部页面 -->\r\n");
      out.write("\t\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "season.jsp", out, false);
      out.write("\r\n");
      out.write("\t\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "head.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("ID", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(ID ), request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("role", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(role ), request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("level", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(bean.level ), request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("nickiname", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(bean.nickiname ), request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("sign", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(bean.sign ), request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("background", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(bean.background ), request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("headphoto", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(bean.headphoto ), request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("\t\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "lead.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("ID", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(ID ), request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t<form action=\"Work.jsp\" method=\"post\" name=\"form1\">\r\n");
      out.write("\t\t<!-- 页面选择 -->\r\n");
      out.write("\t\t<div class=\"lead_block\">\r\n");
      out.write("\t\t<div class=\"worktype_discribe_shead\"></div>\r\n");
      out.write("\t\t<div class=\"worktype_discribe_head dinylight-color\"></div>\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"ID\" value=\"");
      out.print(ID);
      out.write("\" style=\"display:none\">\r\n");
      out.write("\t\t\t<button class=\"");
      out.print(class_1);
      out.write("\" id=\"everybody_work\" name=\"type\" value=\"1_");
      out.print(chose);
      out.write("\">大家的作品</button>\r\n");
      out.write("\t\t\t<button  class=\"small-font ");
      out.print(class_2);
      out.write("\" id=\"mywork\" name=\"type\" value=\"2_");
      out.print(chose);
      out.write("\">我的作品</button>\r\n");
      out.write("\t\t\t<button  class=\"small-font ");
      out.print(class_3);
      out.write("\" id=\"sendwork\" name=\"type\" value=\"3_");
      out.print(chose);
      out.write("\">提交作品</button>\r\n");
      out.write("\t\t<div class=\"worktype_discribe\"></div>\r\n");
      out.write("\t\t");
if(!pages.equals("3")){
      out.write("\r\n");
      out.write("\t\t<div class=\"type_choose\"> \r\n");
      out.write("\t\t\t\t<div class=\"type_choose_area\">\r\n");
      out.write("\t\t\t\t\t<button class=\"type_choose_line small-font ");
      out.print(lineClass_1 );
      out.write("\" id=\"back_works\" value=\"");
      out.print(pages);
      out.write("_1\" name=\"type\">后端作品</button><div class=\"type_choose_row font-normal-color\">|</div>\r\n");
      out.write("\t\t\t\t\t<button class=\"type_choose_line small-font ");
      out.print(lineClass_2 );
      out.write("\" id=\"head_works\"  value=\"");
      out.print(pages);
      out.write("_2\" name=\"type\">前端作品</button><div class=\"type_choose_row font-normal-color\">|</div>\r\n");
      out.write("\t\t\t\t\t<button class=\"type_choose_line small-font ");
      out.print(lineClass_3 );
      out.write("\" id=\"all_works\"  value=\"");
      out.print(pages);
      out.write("_3\" name=\"type\">全部作品</button>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t<!--搜索 -->\r\n");
      out.write("\t\t<div class=\"search_area\">\r\n");
      out.write("\t\t\t<div class=\"search \">\r\n");
      out.write("\t\t\t\t<div class=\"search-block\">\r\n");
      out.write("\t\t\t\t\t<div class=\"search-symble\" style=\"margin-left: 4%;\"><img src=\"img/lead_photo/搜索.png\" style=\"width: 90%; height:90%;\"/></div>\r\n");
      out.write("\t\t\t\t\t<div class=\"search-form\">\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<input type=\"text\" style=\"width: 73.5%;height: 25px;\"/>\r\n");
      out.write("\t\t\t\t\t\t<input type=\"submit\" class=\"check_button normal-color\" value=\"搜索\" />\r\n");
      out.write("\t\t\t\t\t</div></div> </div>\t\t\t\r\n");
      out.write("\t\t  \t\t  </div>\r\n");
      out.write("\t\t\t</div>\t\r\n");
      out.write("\t\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t<!-- 单条作品 -->\r\n");
      out.write("\t\t<div class=\"body_block\" id=\"display\">\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t");
if(type.equals("1_1")||type.equals("1_2")||type.equals("2_1")||type.equals("2_2")){ 
      out.write("\r\n");
      out.write("\t\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "Work_block.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("ID", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(ID ), request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("type", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(chose ), request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("pages", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(pages ), request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("\t\t");
} 
      out.write("\r\n");
      out.write("\t\t");
if(type.equals("2_3")||type.equals("1_3")){ 
      out.write("\r\n");
      out.write("\t\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "Work_allworks.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("ID", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(ID ), request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("pages", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(pages ), request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("\t\t");
} 
      out.write("\r\n");
      out.write("\t\t");
if(pages.equals("3")){ 
      out.write("\r\n");
      out.write("\t\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "Work_submitworks.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("ID", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(ID ), request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("\t\t");
} 
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>\r\n");
 bean.con.close();
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$('#work').css('border-bottom-style','solid');\r\n");
      out.write("\tvar $logo = $('#sign_list li');\r\n");
      out.write("\t \r\n");
      out.write("\t \r\n");
      out.write("\t $logo.mouseenter(function(){\r\n");
      out.write("    \t $(this).css('border-bottom-style','solid');\r\n");
      out.write("    \t $('#work').css('border-bottom-style','none');\r\n");
      out.write(" \t\t});\r\n");
      out.write("\t \r\n");
      out.write("\t $logo.mouseleave(function(){ \r\n");
      out.write("\t\t  $logo.css('border-bottom-style','none');\r\n");
      out.write("\t\t  $('#work').css('border-bottom-style','solid');\r\n");
      out.write("\t\t });\r\n");
      out.write("\t});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
