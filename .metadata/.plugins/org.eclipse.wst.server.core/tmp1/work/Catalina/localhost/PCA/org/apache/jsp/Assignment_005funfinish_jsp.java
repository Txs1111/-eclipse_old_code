/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.33
 * Generated at: 2021-03-14 07:11:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.StringTokenizer;

public final class Assignment_005funfinish_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.StringTokenizer");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	/*------------------------------------------------------------------------------------------------
	修改人			     
	修改时间 		
	修改内容		
	版本号			 
	-------------------------------------------------------------------------------------------------*/

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"Css/Public_style.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"Css/Assignment.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"./Css/Public_Color/orange.css\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<!--任务具体信息 -->\r\n");
      out.write("\t<div class=\"finish_first_headline normal-color\">\r\n");
      out.write("\t\t<div class=\"finish_first_head_1 normal-color normal-font\">发布日期</div>\r\n");
      out.write("\t\t<div class=\"finish_first_head_2  normal-color normal-font\">截止日期</div>\r\n");
      out.write("\t\t<div class=\"finish_first_head_2  normal-color normal-font\">语言</div>\r\n");
      out.write("\t\t<div class=\"finish_secend_head  normal-color normal-font\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看作业</div>\r\n");
      out.write("\t\t<div class=\"finish_first_head_2  normal-color normal-font\">难度</div>\r\n");
      out.write("\t\t<div class=\"finish_third_head  normal-color normal-font\">类型</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t");

		request.setCharacterEncoding("UTF-8");
		String missiondate = request.getParameter("missiondate");
		StringTokenizer chart1 = new StringTokenizer(missiondate, "欛");
		StringTokenizer chart2 = null;
		int num = chart1.countTokens();
		String color = "";
		for (int a = 0; a < num; a++) {
			if (a % 2 == 0) {
				color = "white-color";
			} else {
				color = "dinylight-color";
			}
			chart2 = new StringTokenizer(chart1.nextToken(), "鰶");
	
      out.write("\r\n");
      out.write("\t<div class=\"finish_first_contentline ");
      out.print(color);
      out.write("\">\r\n");
      out.write("\t\t<div class=\"");
      out.print(color);
      out.write("\">\r\n");
      out.write("\t\t\t<div class=\"finish_first_1 ");
      out.print(color);
      out.write(" small-font light-font\">");
      out.print(chart2.nextToken());
      out.write("</div>\r\n");
      out.write("\t\t\t<div class=\"finish_first_2 ");
      out.print(color);
      out.write(" small-font light-font\">");
      out.print(chart2.nextToken());
      out.write("</div>\r\n");
      out.write("\t\t\t<div class=\"finish_first_2 ");
      out.print(color);
      out.write(" small-font\">");
      out.print(chart2.nextToken());
      out.write("</div>\r\n");
      out.write("\t\t\t<form action=\"Assignment_unfinished_details.jsp\" method=\"post\">\r\n");
      out.write("\t\t\t\t<div class=\"finish_secend ");
      out.print(color);
      out.write(" small-font\">\r\n");
      out.write("\t\t\t\t\t<button style=\"line-height: 35px; width: 100%; height: 100%; border: 0px solid white;\" class=\"");
      out.print(color);
      out.write("\" name=\"missionID\" value=\"");
      out.print(chart2.nextToken());
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t<img src=\"img/mission_tips/");
      out.print(chart2.nextToken());
      out.write(".png\" style=\"height: 50%; margin-top: 5px; float: left;\">\r\n");
      out.write("\t\t\t\t\t\t");
      out.print(chart2.nextToken());
      out.write("\r\n");
      out.write("\t\t\t\t\t</button>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t\t<div class=\"finish_first_2 ");
      out.print(color);
      out.write(" small-font \">\r\n");
      out.write("\t\t\t\t");

					int starts = Integer.parseInt(chart2.nextToken());
						for (int b = 0; b < starts; b++) {
				
      out.write("\r\n");
      out.write("\t\t\t\t<img src=\"img/example/星星.png\" style=\"height: 30%; margin-top: 15%;\">\r\n");
      out.write("\t\t\t\t");

					}
				
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"finish_third ");
      out.print(color);
      out.write(" small-font light-font\">");
      out.print(chart2.nextToken());
      out.write("</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t");

		}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
